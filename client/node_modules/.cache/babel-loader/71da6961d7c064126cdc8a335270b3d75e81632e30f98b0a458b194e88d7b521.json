{"ast":null,"code":"var _jsxFileName = \"D:\\\\skillza\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  const setAuthToken = token => {\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n    } else {\n      delete axios.defaults.headers.common['x-auth-token'];\n    }\n  };\n\n  // --- NEW: A function to reload user data from the server ---\n  // useCallback is used for performance optimization\n  const reloadUser = useCallback(async () => {\n    if (token) {\n      setAuthToken(token);\n      try {\n        const res = await axios.get('http://localhost:5000/api/auth/me');\n        setUser(res.data); // Update the state with fresh user data\n      } catch (err) {\n        console.error('Failed to reload user', err);\n        // If token is invalid, log the user out\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n      }\n    }\n  }, [token]);\n  useEffect(() => {\n    const loadInitialUser = async () => {\n      if (token) {\n        await reloadUser(); // Use our new function to load the user\n      }\n      setLoading(false);\n    };\n    loadInitialUser();\n  }, [token, reloadUser]);\n  const login = async (email, password) => {\n    const res = await axios.post('http://localhost:5000/api/auth/login', {\n      email,\n      password\n    });\n    localStorage.setItem('token', res.data.token);\n    setToken(res.data.token);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const contextValue = {\n    token,\n    user,\n    loading,\n    login,\n    logout,\n    reloadUser // <-- Expose the new function to the rest of the app\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"0XeDYp+mn6HKidxXfJ8uL1ozAh0=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","setAuthToken","defaults","headers","common","reloadUser","res","get","data","err","console","error","removeItem","loadInitialUser","login","email","password","post","setItem","logout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/skillza/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const setAuthToken = (token) => {\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n    } else {\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n    }\r\n  };\r\n\r\n  // --- NEW: A function to reload user data from the server ---\r\n  // useCallback is used for performance optimization\r\n  const reloadUser = useCallback(async () => {\r\n    if (token) {\r\n      setAuthToken(token);\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/auth/me');\r\n        setUser(res.data); // Update the state with fresh user data\r\n      } catch (err) {\r\n        console.error('Failed to reload user', err);\r\n        // If token is invalid, log the user out\r\n        localStorage.removeItem('token');\r\n        setToken(null);\r\n        setUser(null);\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n\r\n  useEffect(() => {\r\n    const loadInitialUser = async () => {\r\n      if (token) {\r\n        await reloadUser(); // Use our new function to load the user\r\n      }\r\n      setLoading(false);\r\n    };\r\n    loadInitialUser();\r\n  }, [token, reloadUser]);\r\n\r\n  const login = async (email, password) => {\r\n    const res = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    localStorage.setItem('token', res.data.token);\r\n    setToken(res.data.token);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const contextValue = {\r\n    token,\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    reloadUser, // <-- Expose the new function to the rest of the app\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMkB,YAAY,GAAIN,KAAK,IAAK;IAC9B,IAAIA,KAAK,EAAE;MACTT,KAAK,CAACgB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAGT,KAAK;IACvD,CAAC,MAAM;MACL,OAAOT,KAAK,CAACgB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC;IACtD;EACF,CAAC;;EAED;EACA;EACA,MAAMC,UAAU,GAAGpB,WAAW,CAAC,YAAY;IACzC,IAAIU,KAAK,EAAE;MACTM,YAAY,CAACN,KAAK,CAAC;MACnB,IAAI;QACF,MAAMW,GAAG,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,mCAAmC,CAAC;QAChEb,OAAO,CAACY,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;QAC3C;QACAZ,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;QAChChB,QAAQ,CAAC,IAAI,CAAC;QACdF,OAAO,CAAC,IAAI,CAAC;MACf;IACF;EACF,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC;EAGXX,SAAS,CAAC,MAAM;IACd,MAAM6B,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAIlB,KAAK,EAAE;QACT,MAAMU,UAAU,CAAC,CAAC,CAAC,CAAC;MACtB;MACAL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDa,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAAClB,KAAK,EAAEU,UAAU,CAAC,CAAC;EAEvB,MAAMS,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAMV,GAAG,GAAG,MAAMpB,KAAK,CAAC+B,IAAI,CAAC,sCAAsC,EAAE;MAAEF,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzFnB,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAEZ,GAAG,CAACE,IAAI,CAACb,KAAK,CAAC;IAC7CC,QAAQ,CAACU,GAAG,CAACE,IAAI,CAACb,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnBtB,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChChB,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAM0B,YAAY,GAAG;IACnBzB,KAAK;IACLF,IAAI;IACJM,OAAO;IACPe,KAAK;IACLK,MAAM;IACNd,UAAU,CAAE;EACd,CAAC;EAED,oBACEjB,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAA7B,QAAA,EACvC,CAACQ,OAAO,IAAIR;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAClC,EAAA,CApEWF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAsEzB,eAAeD,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}